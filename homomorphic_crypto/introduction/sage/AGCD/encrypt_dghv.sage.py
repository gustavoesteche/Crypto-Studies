

# This file was *autogenerated* from the file encrypt_dghv.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_3 = Integer(3); _sage_const_6 = Integer(6); _sage_const_5 = Integer(5); _sage_const_4 = Integer(4)
load("utils.sage")
load("distribution.sage")

class DGHV:
    def __init__(self, gamma, eta, rho, t=_sage_const_2 , p=_sage_const_1 ):
        assert(gamma > eta)
        assert(eta > rho)
        if p == _sage_const_1 :
            p = random_prime(_sage_const_2 **eta, lbound=_sage_const_2  ** (eta-_sage_const_1 ))
        else:
            assert(eta - _sage_const_1  <= p.nbits() <= eta)
        self.gamma = gamma 
        self.eta = eta
        self.rho = rho
        self.t = t
        self.p = p 
        self.x0 = p * sample_q(gamma, eta)
        self.Zp = ZZ.quotient(self.p)
        self.Zx0 = ZZ.quotient(self.x0)
        assert(self.x0 != _sage_const_0 )
    
    def enc(self, m):
        q = sample_q(self.gamma , self.eta)
        r = sample_r(self.rho)
        c = self.p*q + self.t * r + m
        c %= self.x0
        return c

    def dec(self, c): 
        return sym_mod(c, self.p) % self.t
    
    def not_gate(self, c):
        return (_sage_const_1 -c) % self.x0

    def add(self, c1, c2):
        return (c1 + c2) % self.x0
    
    def mult(self, c1, c2):
        return (c1 *c2) % self.x0
        
def comparacao_homomorfica(dhgv:DGHV, n=_sage_const_3 ):
    m0 = ZZ.random_element(_sage_const_0 , _sage_const_2 **n)
    m1 = ZZ.random_element(_sage_const_0 , _sage_const_2 **n)
    print(m0 , m1)
    bits0 = m0.digits(base=_sage_const_2 , padto = n)
    bits1 = m1.digits(base=_sage_const_2 , padto = n)
    print(bits0, bits1)
    c0 = [dhgv.enc(bi) for bi in bits0]
    c1 = [dhgv.enc(bi) for bi in bits1]
    print(c0, c1)

    c, m = _sage_const_1 ,_sage_const_1 
    for i in range(n):
        cmp_i = dhgv.add(c0[i], c1[i])
        cmp_i = dhgv.not_gate(cmp_i)
        c = dhgv.mult(c, cmp_i)
        print("esse Ã© o c: ", c)
    
    res = dhgv.dec(c)
    print(res)
    assert((m0 == m1) == res)

ola = DGHV(_sage_const_6 ,_sage_const_5 ,_sage_const_4 )
comparacao_homomorfica(ola,_sage_const_6 )

